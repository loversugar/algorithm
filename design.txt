限时秒杀系统的设计面临的问题：
    在流量突增的情况下保证系统的稳定性。

    解决方案：通过限流策略－－多层限流（尽早限流）
        １．合法性限流－－限制合法请求到达服务器（非法例子：机器人、刷单）,解决方案：验证码（原来需要一秒的时间增长到三秒、IP限制黑名单、隐藏秒杀入口（在秒杀开始开放接口））
        ２．负载限流－－nginx(应用层)　网络七层模型　　数据链路层通过ＭＡＣ地址进行负载、网络层通过ＩＰ地址进行负载、传输层通过端口进行负载。
            问题能否进行级联负载:可以，但是每增加一次负载会增加一个转发的路径，而每增加一个转发路径就会造成网络延迟问题
            那么对于级联负载常见的做法:LVS,nginx（软负载）｜　硬负载　F5/Array
        前面的两层是在请求抵达服务器之前，如果抵达之后如何操作
        ３．服务限流：
            １）web服务器限流：修改tomcat的连接数、在服务器内部编写限流算法：令牌桶算法(Guava)、漏桶算法、
            ２）使用消息队列进行限流（Kafka消息队列本质是缓冲区）
            ３）使用缓存限流，缓存的作用是为了减少用户请求服务端的数量
                缓存静态请求：ＨＴＭＬ/js缓存到浏览器、图片缓存到nginx oss 如果是视频可以缓存在ＣＤＮ中
                缓存动态请求：本地缓存　　远程缓存　　　缓存级别不是越多越好：但是要考虑缓存的一致性问题　　缓存越多请求路径越来越长会造成网络延迟问题
        ４．监控限流
            建立线程监控cpu使用情况来进行服务降级或者拒绝策略(关闭不必要的业务接口)

什么是Https:
    开发目的是对应用服务器网站进行身份验证，保证交互数的安全性和完整性
    重要目的可以避免
    １．窃听风险（通过使用非对称加密算法）
    ２．消息篡改（通过消息摘要算法验证数据完整性）　
    ３．中间人攻击，在链路受到第三方伪装自己。出现原因：密钥交换初期不安全,网络双方无法确定对方身份。
        解决方案：１．引入第三方权威机构CA(Certificate Authority 数字证书认证机构)，ＣＡ机构与操作系统厂商合作，将ＣＡ机构公钥内置在浏览器和操作系统中，这样不走网络传输。
        ２．服务器将自己信息（自己公钥、电子签证机关信息、权威机构的签字和有效期）进行摘要，发给ＣＡ机构，机构使用自己的私钥加密信息，形成数字证书，发送给服务器端，然后将证书传给客户端。
            客户端通过ＣＡ公钥解密数据，验证信息，这过程验证数字证书
    4.CA错误签发

